import { useState } from "react";
import { DynamicChallengeDisplay } from "./DynamicChallengeDisplay";
import { useToast } from "@/hooks/use-toast";
import { useChallenge } from "@/contexts/ChallengeContext";

interface DailyChallenge {
  id: string;
  title: string;
  category: string;
  difficulty: "beginner" | "intermediate" | "advanced";
  description: string;
  context: string[];
  question: string;
  resources: string[];
}

const dailyChallenge: DailyChallenge = {
  id: "challenge-001",
  title: "Or√ßamento Familiar Inteligente",
  category: "personal_finance",
  difficulty: "intermediate",
  description: "A fam√≠lia Silva tem uma renda mensal de R$ 4.500. Eles querem organizar suas finan√ßas de forma inteligente.",
  context: [
    "Gastos fixos (aluguel, contas): R$ 2.200",
    "Alimenta√ß√£o: R$ 800", 
    "Transporte: R$ 400",
    "Lazer: R$ 300"
  ],
  question: "Eles querem economizar 20% da renda para emerg√™ncias e sonham em fazer uma viagem que custa R$ 3.600 daqui a 8 meses. DESAFIO: Crie um plano financeiro para a fam√≠lia Silva. √â poss√≠vel atingir a meta de poupan√ßa E economizar para a viagem? Se n√£o, que ajustes voc√™ sugere?",
  resources: [
    "Calculadora de or√ßamento familiar",
    "Dicas de economia dom√©stica", 
    "Planilha de controle financeiro"
  ]
};

const DailyChallenge = () => {
  const [answer, setAnswer] = useState("");
  const [showHint, setShowHint] = useState(false);
  const [showTutorHelp, setShowTutorHelp] = useState(false);
  const [feedback, setFeedback] = useState("");
  const { toast } = useToast();

  const handleSubmitAnswer = () => {
    if (!answer.trim()) {
      toast({
        title: "Resposta vazia",
        description: "Por favor, escreva sua resposta antes de enviar.",
        variant: "destructive"
      });
      return;
    }

    // Palavras-chave que indicam uma resposta correta
    const correctKeywords = [
      "cortar", "reduzir", "diminuir", "economizar",
      "550", "900", "450", "1350", "lazer", "transporte",
      "n√£o √© poss√≠vel", "insuficiente", "ajustar"
    ];

    // Verifica se a resposta cont√©m elementos da solu√ß√£o correta
    const answerLower = answer.toLowerCase();
    const hasCorrectKeywords = correctKeywords.some(keyword => 
      answerLower.includes(keyword.toLowerCase())
    );

    // Verifica se mencionou c√°lculos b√°sicos corretos
    const mentionedCalculations = answerLower.includes("3700") || 
                                 answerLower.includes("800") ||
                                 (answerLower.includes("4500") && answerLower.includes("gasto"));

    const isCorrectAnswer = hasCorrectKeywords && mentionedCalculations;

    if (isCorrectAnswer) {
      // Resposta correta
      setFeedback("üéâ Excelente an√°lise! Voc√™ identificou corretamente que a fam√≠lia precisa reduzir gastos em R$ 550 para atingir ambas as metas. Sua solu√ß√£o demonstra boa compreens√£o de planejamento financeiro.");
      
      toast({
        title: "‚úÖ Resposta Correta!",
        description: "Parab√©ns! Sua solu√ß√£o est√° no caminho certo.",
      });
    } else {
      // Resposta incorreta - dar dicas
      setFeedback("‚ùå Sua resposta precisa de alguns ajustes. Dica: Calcule primeiro quanto sobra ap√≥s os gastos (R$ 4.500 - R$ 3.700 = R$ 800). Depois veja quanto precisam: 20% de emerg√™ncia (R$ 900/m√™s) + viagem (R$ 450/m√™s) = R$ 1.350/m√™s. Como s√≥ sobram R$ 800, precisam cortar R$ 550 nos gastos. Tente novamente!");
      
      toast({
        title: "‚ùå Resposta Incorreta",
        description: "Revise os c√°lculos e tente novamente. Veja as dicas no feedback.",
        variant: "destructive"
      });
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "beginner": return "bg-gradient-focus text-primary";
      case "intermediate": return "bg-gradient-learning text-white";
      case "advanced": return "bg-gradient-achievement text-white";
      default: return "bg-secondary";
    }
  };

  const translateDifficulty = (difficulty: string) => {
    switch (difficulty) {
      case "beginner": return "Iniciante";
      case "intermediate": return "Intermedi√°rio";
      case "advanced": return "Avan√ßado";
      default: return difficulty;
    }
  };

  const getHint = () => {
    const { currentChallenge } = useChallenge();
    if (!currentChallenge) return "Gere um novo desafio para ver dicas personalizadas.";
    
    // Dicas espec√≠ficas por ID do desafio
    const specificHints: { [key: string]: string } = {
      'budget-planning': 'Primeiro calcule quanto sobra ap√≥s os gastos atuais (Renda - Total de gastos). Depois determine se √© poss√≠vel atingir ambas as metas (20% para emerg√™ncia + valor mensal para a viagem). Se n√£o for poss√≠vel, identifique onde cortar gastos.',
      'pattern-sequence': 'Observe a diferen√ßa entre os n√∫meros consecutivos. Existe um padr√£o nas diferen√ßas? √Äs vezes o padr√£o est√° na progress√£o das diferen√ßas.',
      'geometry-kitchen': 'Para calcular a √°rea do c√≠rculo, use a f√≥rmula A = œÄ √ó r¬≤. Lembre-se que o raio √© metade do di√¢metro.',
      'logical-reasoning': 'Identifique as premissas verdadeiras e use dedu√ß√£o l√≥gica. Elimine as op√ß√µes que contradizem as informa√ß√µes dadas.',
      'emotional-conflict': 'Considere os sentimentos de ambas as partes. Que estrat√©gia de comunica√ß√£o poderia resolver o conflito sem magoar ningu√©m?'
    };

    // Se h√° uma dica espec√≠fica para este desafio, use-a
    if (specificHints[currentChallenge.id]) {
      return specificHints[currentChallenge.id];
    }

    // An√°lise por palavras-chave no t√≠tulo e contexto
    const title = currentChallenge.title.toLowerCase();
    const context = currentChallenge.context ? currentChallenge.context.join(' ').toLowerCase() : '';
    const description = currentChallenge.description.toLowerCase();
    const allText = `${title} ${context} ${description}`;

    // Dicas baseadas em palavras-chave
    if (allText.includes('or√ßamento') || allText.includes('dinheiro') || allText.includes('economia') || allText.includes('renda')) {
      return 'Identifique receitas e despesas. Calcule o valor dispon√≠vel e compare com as metas desejadas.';
    }
    if (allText.includes('sequ√™ncia') || allText.includes('padr√£o') || allText.includes('pr√≥ximo n√∫mero')) {
      return 'Procure por padr√µes nas diferen√ßas entre n√∫meros consecutivos ou em multiplica√ß√µes/divis√µes.';
    }
    if (allText.includes('√°rea') || allText.includes('per√≠metro') || allText.includes('geometria')) {
      return 'Identifique as formas geom√©tricas envolvidas e use as f√≥rmulas apropriadas.';
    }
    if (allText.includes('conflito') || allText.includes('emo√ß√£o') || allText.includes('sentimento')) {
      return 'Considere as emo√ß√µes envolvidas e busque solu√ß√µes emp√°ticas que beneficiem todos.';
    }
    if (allText.includes('l√≥gica') || allText.includes('dedu√ß√£o') || allText.includes('premissa')) {
      return 'Use racioc√≠nio l√≥gico: identifique as informa√ß√µes verdadeiras e tire conclus√µes v√°lidas.';
    }

    // Fallback por categoria
    switch (currentChallenge.category) {
      case 'mathematics':
        return 'Identifique os dados fornecidos e determine que opera√ß√µes s√£o necess√°rias. Desenhe diagramas se ajudar.';
      case 'logic':
        return 'Identifique os padr√µes ou regras. Teste suas hip√≥teses com os exemplos dados.';
      case 'life_practical':
        return 'Considere os recursos dispon√≠veis e as limita√ß√µes. Pense em solu√ß√µes vi√°veis e realistas.';
      case 'emotional':
        return 'Reflita sobre seus sentimentos e os dos outros. Considere diferentes perspectivas.';
      default:
        return 'Leia o problema com aten√ß√£o e identifique as informa√ß√µes-chave.';
    }
  };

  const getTutorAdvice = () => {
    const { currentChallenge } = useChallenge();
    if (!currentChallenge) return "Gere um novo desafio para receber orienta√ß√£o do tutor IA.";
    
    // Conselhos espec√≠ficos por ID do desafio
    const specificAdvice: { [key: string]: string } = {
      'budget-planning': 'Para resolver este problema: 1) Calcule a renda dispon√≠vel (R$ 4.500 - gastos atuais), 2) Determine quanto precisa poupar (20% = R$ 900/m√™s + R$ 450/m√™s para viagem), 3) Compare com o dispon√≠vel, 4) Se insuficiente, sugira cortes nos gastos n√£o-essenciais como lazer.',
      'pattern-sequence': 'Para sequ√™ncias num√©ricas: 1) Liste as diferen√ßas entre termos consecutivos, 2) Veja se h√° padr√£o nas diferen√ßas, 3) Se n√£o h√° padr√£o direto, analise as diferen√ßas das diferen√ßas, 4) Aplique o padr√£o encontrado.',
      'geometry-kitchen': 'Para problemas de geometria: 1) Identifique as formas (c√≠rculo, ret√¢ngulo, etc.), 2) Liste as medidas conhecidas, 3) Escolha a f√≥rmula adequada, 4) Substitua os valores e calcule.',
      'logical-reasoning': 'Para racioc√≠nio l√≥gico: 1) Liste todas as informa√ß√µes dadas como verdadeiras, 2) Identifique o que precisa descobrir, 3) Use elimina√ß√£o das op√ß√µes imposs√≠veis, 4) Aplique dedu√ß√£o l√≥gica.',
      'emotional-conflict': 'Para conflitos emocionais: 1) Identifique os sentimentos de cada pessoa, 2) Reconhe√ßa as necessidades por tr√°s das emo√ß√µes, 3) Busque solu√ß√µes que atendam a ambos, 4) Comunique-se com empatia.'
    };

    // Se h√° um conselho espec√≠fico para este desafio, use-o
    if (specificAdvice[currentChallenge.id]) {
      return specificAdvice[currentChallenge.id];
    }

    // An√°lise por palavras-chave no t√≠tulo e contexto
    const title = currentChallenge.title.toLowerCase();
    const context = currentChallenge.context ? currentChallenge.context.join(' ').toLowerCase() : '';
    const description = currentChallenge.description.toLowerCase();
    const allText = `${title} ${context} ${description}`;

    // Conselhos baseados em palavras-chave
    if (allText.includes('or√ßamento') || allText.includes('dinheiro') || allText.includes('economia') || allText.includes('renda')) {
      return 'Para problemas financeiros: 1) Liste todas as receitas e despesas, 2) Calcule o saldo dispon√≠vel, 3) Compare com as metas desejadas, 4) Identifique onde ajustar se necess√°rio.';
    }
    if (allText.includes('sequ√™ncia') || allText.includes('padr√£o') || allText.includes('pr√≥ximo n√∫mero')) {
      return 'Para sequ√™ncias: 1) Observe as rela√ß√µes entre n√∫meros consecutivos, 2) Teste diferentes tipos de progress√£o (aritm√©tica, geom√©trica), 3) Identifique o padr√£o, 4) Aplique para encontrar os pr√≥ximos termos.';
    }
    if (allText.includes('√°rea') || allText.includes('per√≠metro') || allText.includes('geometria')) {
      return 'Para geometria: 1) Desenhe o problema se poss√≠vel, 2) Identifique as formas geom√©tricas, 3) Liste as medidas conhecidas, 4) Use as f√≥rmulas corretas para calcular.';
    }
    if (allText.includes('conflito') || allText.includes('emo√ß√£o') || allText.includes('sentimento')) {
      return 'Para quest√µes emocionais: 1) Reconhe√ßa os sentimentos envolvidos, 2) Pratique escuta ativa, 3) Busque entender as perspectivas de todos, 4) Comunique-se com clareza e empatia.';
    }
    if (allText.includes('l√≥gica') || allText.includes('dedu√ß√£o') || allText.includes('premissa')) {
      return 'Para l√≥gica: 1) Organize as informa√ß√µes conhecidas, 2) Identifique as regras ou premissas, 3) Use dedu√ß√£o sistem√°tica, 4) Elimine possibilidades contradict√≥rias.';
    }

    // Fallback por categoria
    switch (currentChallenge.category) {
      case 'mathematics':
        return 'Use o m√©todo CPA: 1) Concrete - visualize com objetos, 2) Pictorial - desenhe o problema, 3) Abstract - aplique f√≥rmulas matem√°ticas.';
      case 'logic':
        return 'Para problemas l√≥gicos: 1) Liste o que voc√™ sabe, 2) Identifique o que precisa descobrir, 3) Use elimina√ß√£o e dedu√ß√£o sistem√°tica.';
      case 'life_practical':
        return 'Para situa√ß√µes pr√°ticas: 1) Analise o contexto, 2) Liste op√ß√µes dispon√≠veis, 3) Avalie consequ√™ncias, 4) Escolha a melhor solu√ß√£o.';
      case 'emotional':
        return 'Para quest√µes emocionais: 1) Identifique os sentimentos, 2) Aceite as emo√ß√µes, 3) Encontre formas saud√°veis de express√£o, 4) Busque apoio quando necess√°rio.';
      default:
        return 'Organize suas ideias, analise os dados dispon√≠veis e desenvolva uma solu√ß√£o estruturada passo a passo.';
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <DynamicChallengeDisplay />
      
      {/* Challenge Interaction Section - Layout Horizontal */}
      <div className="space-y-6">
        {/* Bot√µes de Dica e Ajuda acima da caixa de resposta */}
        <div className="flex gap-3 justify-start">
          <button
            onClick={() => setShowHint(!showHint)}
            className="px-4 py-2 border border-primary text-primary rounded-lg hover:bg-primary/10 transition-all duration-200 hover-scale flex items-center gap-2"
          >
            <span>üí°</span>
            {showHint ? 'Ocultar Dica' : 'Pedir Dica'}
          </button>
          <button
            onClick={() => setShowTutorHelp(!showTutorHelp)}
            className="px-4 py-2 border border-primary text-primary rounded-lg hover:bg-primary/10 transition-all duration-200 hover-scale flex items-center gap-2"
          >
            <span>ü§ñ</span>
            {showTutorHelp ? 'Ocultar Ajuda' : 'Ajuda do Tutor IA'}
          </button>
        </div>

        {/* Se√ß√µes de Dica e Tutor IA espec√≠ficas para o desafio atual */}
        {showHint && (
          <div className="bg-gradient-subtle border border-primary/20 rounded-lg p-4">
            <h4 className="font-medium text-primary mb-2 flex items-center">
              <span className="mr-2">üí°</span>
              Dica
            </h4>
            <p className="text-foreground text-sm leading-relaxed">
              {getHint()}
            </p>
          </div>
        )}

        {showTutorHelp && (
          <div className="bg-gradient-focus border border-primary/20 rounded-lg p-4">
            <h4 className="font-medium text-primary mb-2 flex items-center">
              <span className="mr-2">ü§ñ</span>
              Tutor IA
            </h4>
            <p className="text-foreground text-sm leading-relaxed">
              {getTutorAdvice()}
            </p>
          </div>
        )}

        {/* Caixa de Resposta Grande e Horizontal */}
        <div className="bg-card border border-border rounded-lg p-6 space-y-4">
          <h3 className="text-lg font-semibold text-foreground">Sua Resposta:</h3>
          <textarea
            value={answer}
            onChange={(e) => setAnswer(e.target.value)}
            placeholder="Escreva sua solu√ß√£o aqui... Detalhe seu racioc√≠nio e os c√°lculos realizados."
            className="w-full h-40 p-4 border border-border rounded-lg resize-none focus:ring-2 focus:ring-primary focus:border-transparent text-foreground bg-background transition-all duration-200 hover:shadow-md"
          />
          
          {/* Bot√µes de A√ß√£o */}
          <div className="flex gap-3">
            <button
              onClick={handleSubmitAnswer}
              className="bg-primary text-primary-foreground px-6 py-2 rounded-lg hover:bg-primary/90 transition-all duration-200 font-medium hover-scale flex items-center gap-2"
            >
              <span>üìù</span>
              Enviar Resposta
            </button>
            <button
              onClick={() => {
                setAnswer('');
                setFeedback('');
              }}
              className="px-4 py-2 border border-border text-foreground rounded-lg hover:bg-muted transition-all duration-200 hover-scale"
            >
              Limpar
            </button>
          </div>
        </div>

        {/* Feedback Section */}
        {feedback && (
          <div className="bg-primary border border-primary/20 rounded-lg p-4">
            <h4 className="font-medium text-white mb-2 flex items-center">
              <span className="mr-2">‚úÖ</span>
              Feedback da Resposta
            </h4>
            <p className="text-white text-sm leading-relaxed">{feedback}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default DailyChallenge;