import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Send, BookOpen, Calculator, Brain, Target, Zap, HelpCircle } from "lucide-react";
import { openaiService } from "@/services/openaiService";

// Componente para mostrar status da IA
const AIStatusIndicator = () => {
  const [status, setStatus] = useState<'none' | 'stored' | 'active' | 'error'>('none');

  useEffect(() => {
    setStatus(openaiService.getApiKeyStatus());
  }, []);

  const statusConfig = {
    none: { icon: HelpCircle, color: 'text-red-400', text: 'Sem API Key' },
    stored: { icon: Zap, color: 'text-yellow-400', text: 'API Configurada' },
    active: { icon: Zap, color: 'text-green-400', text: 'IA Ativa' },
    error: { icon: HelpCircle, color: 'text-red-400', text: 'Erro na API' }
  };

  const config = statusConfig[status];
  const Icon = config.icon;

  return (
    <div className="flex items-center gap-1 text-xs">
      <Icon className={`w-3 h-3 ${config.color}`} />
      <span className="text-white/80">{config.text}</span>
    </div>
  );
};

// Definindo os tipos para o est√°gio CPA
type CPAStage = 'concrete' | 'pictorial' | 'abstract' | 'adaptive';

// Interface para as mensagens do chat
interface Message {
  id: string;
  content: string;
  sender: 'user' | 'mantha';
  timestamp: Date;
  stage?: CPAStage;
  hasVisual?: boolean;
}

const ManthaChatTutor = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'Ol√°! Sou a **Mantha**, sua tutora especializada no M√©todo CPA de Singapura üìö\n\nEstou aqui para ajud√°-lo a compreender matem√°tica atrav√©s dos tr√™s est√°gios: **Concreto**, **Pict√≥rico** e **Abstrato**.\n\nQual conceito matem√°tico gostaria de explorar hoje?',
      sender: 'mantha',
      timestamp: new Date(),
      stage: 'adaptive'
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [currentStage, setCurrentStage] = useState<CPAStage>('adaptive');
  const [isLoading, setIsLoading] = useState(false);
  const scrollRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [messages]);

  const generateManthaResponse = async (userMessage: string, stage: CPAStage) => {
    try {
      // Try using real OpenAI service first
      const response = await openaiService.generateResponse(userMessage, {
        cpaStage: stage === 'pictorial' ? 'pictorial' : stage === 'abstract' ? 'abstract' : stage === 'concrete' ? 'concrete' : 'concrete',
        learningStyle: 'visual',
        currentLevel: 1,
        previousMessages: messages.slice(-3).map(msg => ({
          role: msg.sender === 'user' ? 'user' as const : 'assistant' as const,
          content: msg.content
        }))
      });
      
      return {
        content: response.message,
        stage: stage,
        isRealAI: response.isRealAI
      };
    } catch (error) {
      console.error('Error getting AI response, using fallback:', error);
      // Fallback to original logic if service fails
      await new Promise(resolve => setTimeout(resolve, 1000));
      const fallbackResponse = await generateFallbackResponse(userMessage, stage);
      return {
        ...fallbackResponse,
        isRealAI: false
      };
    }
  };

  const generateFallbackResponse = async (userMessage: string, stage: CPAStage) => {

    // T√≥picos matem√°ticos que podemos identificar
    const mathTopics = {
      addition: /(?:adi√ß√£o|somar|soma|mais|\+|adicionar)/i,
      subtraction: /(?:subtra√ß√£o|subtrair|menos|\-|tirar)/i,
      multiplication: /(?:multiplica√ß√£o|multiplicar|vezes|√ó|x|\*|tabuada)/i,
      division: /(?:divis√£o|dividir|dividido|√∑|\/)/i,
      fractions: /(?:fra√ß√£o|fra√ß√µes|meio|metade|ter√ßo|quarto)/i,
      geometry: /(?:geometria|tri√¢ngulo|quadrado|c√≠rculo|√°rea|per√≠metro)/i,
      algebra: /(?:√°lgebra|equa√ß√£o|vari√°vel|x|y)/i
    };

    // Identifica o t√≥pico matem√°tico
    let topic = 'general';
    for (const [key, regex] of Object.entries(mathTopics)) {
      if (regex.test(userMessage)) {
        topic = key;
        break;
      }
    }

    // Respostas estruturadas por est√°gio CPA
    const responses = {
      concrete: {
        addition: "**Adi√ß√£o - Est√°gio Concreto**\n\nUtilize objetos f√≠sicos para compreender a opera√ß√£o. Para 3 + 2:\n‚Ä¢ Separe 3 blocos/objetos\n‚Ä¢ Adicione 2 blocos ao grupo\n‚Ä¢ Conte o total: 5 objetos\n\nEste m√©todo desenvolve a **compreens√£o conceitual** antes dos s√≠mbolos.",
        subtraction: "**Subtra√ß√£o - Est√°gio Concreto**\n\nManipule objetos reais para visualizar a opera√ß√£o. Para 5 - 2:\n‚Ä¢ Inicie com 5 objetos\n‚Ä¢ Remova fisicamente 2 objetos\n‚Ä¢ Conte o que permanece: 3 objetos\n\n**Pr√≥ximo passo:** Pratique com diferentes quantidades.",
        multiplication: "**Multiplica√ß√£o - Est√°gio Concreto**\n\nOrganize objetos em grupos iguais. Para 3 √ó 4:\n‚Ä¢ Forme 3 grupos\n‚Ä¢ Coloque 4 objetos em cada grupo\n‚Ä¢ Conte todos os objetos: 12\n\nA multiplica√ß√£o representa **grupos repetidos** de uma quantidade.",
        division: "**Divis√£o - Est√°gio Concreto**\n\nDistribua objetos igualmente. Para 12 √∑ 3:\n‚Ä¢ Separe 12 objetos\n‚Ä¢ Forme 3 grupos iguais\n‚Ä¢ Cada grupo ter√° 4 objetos\n\nA divis√£o √© o processo de **distribui√ß√£o equitativa**.",
        fractions: "**Fra√ß√µes - Est√°gio Concreto**\n\nUse objetos divis√≠veis (papel, pizza, chocolate):\n‚Ä¢ Para 1/2: divida em 2 partes iguais\n‚Ä¢ Para 1/4: divida em 4 partes iguais\n\n**Conceito fundamental:** Fra√ß√µes representam partes de um todo.",
        general: "**Est√°gio Concreto**\n\nManipule objetos f√≠sicos para compreender conceitos matem√°ticos. Esta abordagem desenvolve o **entendimento intuitivo** antes da abstra√ß√£o simb√≥lica."
      },
      pictorial: {
        addition: "**Adi√ß√£o - Est√°gio Pict√≥rico**\n\nRepresente visualmente a opera√ß√£o. Para 4 + 3:\n‚Ä¢ Desenhe 4 c√≠rculos\n‚Ä¢ Desenhe 3 c√≠rculos adicionais\n‚Ä¢ Total: 7 c√≠rculos\n\n**Estrat√©gia:** Use s√≠mbolos consistentes para representar quantidades.",
        subtraction: "**Subtra√ß√£o - Est√°gio Pict√≥rico**\n\nVisualize a remo√ß√£o atrav√©s de desenhos. Para 7 - 2:\n‚Ä¢ Desenhe 7 s√≠mbolos\n‚Ä¢ Risque ou marque 2 s√≠mbolos\n‚Ä¢ Conte os s√≠mbolos restantes: 5\n\n**T√©cnica:** Use cores diferentes para destacar opera√ß√µes.",
        multiplication: "**Multiplica√ß√£o - Est√°gio Pict√≥rico**\n\nCrie diagramas organizados. Para 2 √ó 5:\n‚Ä¢ Desenhe 2 fileiras\n‚Ä¢ 5 pontos em cada fileira\n‚Ä¢ Total: 10 pontos\n\n**Vantagem:** Visualiza√ß√£o clara de padr√µes matem√°ticos.",
        division: "**Divis√£o - Est√°gio Pict√≥rico**\n\nRepresente atrav√©s de agrupamentos visuais. Para 15 √∑ 3:\n‚Ä¢ Desenhe 15 objetos\n‚Ä¢ Circule em 3 grupos iguais\n‚Ä¢ Cada grupo: 5 objetos\n\n**M√©todo:** Use c√≠rculos para delimitar grupos.",
        fractions: "**Fra√ß√µes - Est√°gio Pict√≥rico**\n\nDesenhe modelos de fra√ß√£o. Para 3/4:\n‚Ä¢ Desenhe um ret√¢ngulo\n‚Ä¢ Divida em 4 partes iguais\n‚Ä¢ Sombreie 3 partes\n\n**Representa√ß√£o visual** facilita compreens√£o de propor√ß√µes.",
        general: "**Est√°gio Pict√≥rico**\n\nUse representa√ß√µes visuais sistem√°ticas para conectar conceitos concretos aos s√≠mbolos abstratos. Esta transi√ß√£o √© **fundamental** no processo de aprendizagem."
      },
      abstract: {
        addition: "**Adi√ß√£o - Est√°gio Abstrato**\n\nTrabalhe com s√≠mbolos matem√°ticos: 6 + 4 = 10\n\n**Propriedades fundamentais:**\n‚Ä¢ Comutativa: 6 + 4 = 4 + 6\n‚Ä¢ Associativa: (2 + 3) + 5 = 2 + (3 + 5)\n\n**Aplica√ß√£o:** Resolu√ß√£o eficiente de problemas complexos.",
        subtraction: "**Subtra√ß√£o - Est√°gio Abstrato**\n\nOpere com n√∫meros diretamente: 9 - 3 = 6\n\n**Verifica√ß√£o:** 6 + 3 = 9 ‚úì\n\n**Estrat√©gia:** Sempre verifique resultados usando a opera√ß√£o inversa (adi√ß√£o).",
        multiplication: "**Multiplica√ß√£o - Est√°gio Abstrato**\n\nUtilize fatos matem√°ticos: 7 √ó 8 = 56\n\n**Propriedades:**\n‚Ä¢ Comutativa: 7 √ó 8 = 8 √ó 7\n‚Ä¢ Distributiva: 7 √ó (8 + 2) = 7 √ó 8 + 7 √ó 2\n\n**Dom√≠nio** das tabuadas acelera resolu√ß√£o de problemas.",
        division: "**Divis√£o - Est√°gio Abstrato**\n\nAplique algoritmos de divis√£o: 48 √∑ 6 = 8\n\n**Verifica√ß√£o:** 8 √ó 6 = 48 ‚úì\n\n**Conceito:** Divis√£o e multiplica√ß√£o s√£o **opera√ß√µes inversas**.",
        fractions: "**Fra√ß√µes - Est√°gio Abstrato**\n\nOpere com nota√ß√£o fracion√°ria: 1/2 + 1/4\n\n**Processo:**\n‚Ä¢ Encontre denominador comum: 4\n‚Ä¢ 2/4 + 1/4 = 3/4\n\n**Fundamento:** Denominadores comuns permitem opera√ß√µes diretas.",
        general: "**Est√°gio Abstrato**\n\nUtilize s√≠mbolos matem√°ticos, f√≥rmulas e algoritmos para resolver problemas. Este n√≠vel representa o **dom√≠nio conceitual** completo."
      }
    };

    // Verifica se √© uma pergunta matem√°tica espec√≠fica
    const mathQuestion = userMessage.match(/quanto\s+(?:√©|e)\s*(\d+)\s*[√óx*]\s*(\d+)/i) ||
                        userMessage.match(/quanto\s+(?:√©|e)\s*(\d+)\s*[+]\s*(\d+)/i) ||
                        userMessage.match(/quanto\s+(?:√©|e)\s*(\d+)\s*[-]\s*(\d+)/i) ||
                        userMessage.match(/quanto\s+(?:√©|e)\s*(\d+)\s*[√∑/]\s*(\d+)/i);

    if (mathQuestion) {
      const [, num1, num2] = mathQuestion;
      const a = parseInt(num1);
      const b = parseInt(num2);
      let operation = '';
      let result = 0;
      let symbol = '';

      if (userMessage.includes('√ó') || userMessage.includes('x') || userMessage.includes('*')) {
        result = a * b;
        operation = 'multiplica√ß√£o';
        symbol = '√ó';
      } else if (userMessage.includes('+')) {
        result = a + b;
        operation = 'adi√ß√£o';
        symbol = '+';
      } else if (userMessage.includes('-')) {
        result = a - b;
        operation = 'subtra√ß√£o';
        symbol = '-';
      } else if (userMessage.includes('√∑') || userMessage.includes('/')) {
        result = a / b;
        operation = 'divis√£o';
        symbol = '√∑';
      }

      return {
        content: `**Resolu√ß√£o: ${a} ${symbol} ${b} = ${result}**

**Explica√ß√£o pelo M√©todo CPA:**

**Concreto:** ${operation === 'multiplica√ß√£o' ? `Organize ${a} grupos de ${b} objetos f√≠sicos` : operation === 'adi√ß√£o' ? `Separe ${a} objetos, adicione ${b} objetos` : operation === 'subtra√ß√£o' ? `Inicie com ${a} objetos, remova ${b}` : `Distribua ${a} objetos em ${b} grupos iguais`}

**Pict√≥rico:** ${operation === 'multiplica√ß√£o' ? `Desenhe ${a} fileiras com ${b} pontos cada` : operation === 'adi√ß√£o' ? `Desenhe ${a} s√≠mbolos + ${b} s√≠mbolos` : operation === 'subtra√ß√£o' ? `Desenhe ${a} s√≠mbolos, risque ${b}` : `Desenhe ${a} objetos em ${b} grupos`}

**Abstrato:** ${a} ${symbol} ${b} = ${result}

Qual est√°gio gostaria de aprofundar?`,
        stage: stage
      };
    }

    // Verifica teoremas espec√≠ficos
    if (userMessage.match(/teorema\s+de\s+tales/i)) {
      return {
        content: `**Teorema de Tales**

Estabelece que retas paralelas cortadas por transversais criam segmentos proporcionais.

**Concreto:** Utilize r√©guas e barbantes para construir retas paralelas. Me√ßa os segmentos formados e compare as propor√ß√µes.

**Pict√≥rico:** Construa diagrama com duas retas cortadas por tr√™s paralelas. Marque e compare os segmentos correspondentes.

**Abstrato:** Se a/b = c/d, ent√£o as retas s√£o proporcionais.

**Aplica√ß√£o pr√°tica:** C√°lculo de alturas usando sombras e semelhan√ßa de tri√¢ngulos.

Deseja explorar aplica√ß√µes espec√≠ficas?`,
        stage: stage
      };
    }

    if (userMessage.match(/teorema\s+de\s+pit√°goras/i)) {
      return {
        content: `**Teorema de Pit√°goras**

Para tri√¢ngulos ret√¢ngulos: a¬≤ + b¬≤ = c¬≤ (c = hipotenusa)

**Concreto:** Construa quadrados de papel representando as √°reas dos catetos e hipotenusa. Verifique que a √°rea dos dois quadrados menores equivale √† √°rea do quadrado maior.

**Pict√≥rico:** Desenhe tri√¢ngulo ret√¢ngulo com quadrados em cada lado. Visualize a rela√ß√£o a¬≤ + b¬≤ = c¬≤.

**Abstrato:** Exemplo: tri√¢ngulo (3, 4, 5): 3¬≤ + 4¬≤ = 9 + 16 = 25 = 5¬≤

**Aplica√ß√µes:** C√°lculo de dist√¢ncias, verifica√ß√£o de √¢ngulos retos, diagonais de ret√¢ngulos.

Quer ver mais aplica√ß√µes pr√°ticas?`,
        stage: stage
      };
    }

    // Gera resposta baseada no est√°gio
    if (stage === 'adaptive') {
      const concreteResp = responses.concrete[topic as keyof typeof responses.concrete] || responses.concrete.general;
      const pictorialResp = responses.pictorial[topic as keyof typeof responses.pictorial] || responses.pictorial.general;
      const abstractResp = responses.abstract[topic as keyof typeof responses.abstract] || responses.abstract.general;
      
      return {
        content: `**M√©todo CPA Completo**

${concreteResp}

${pictorialResp}

${abstractResp}

**Pr√≥ximo passo:** Escolha o est√°gio que deseja aprofundar ou pratique com exerc√≠cios espec√≠ficos.`,
        stage: 'adaptive'
      };
    }

    // Resposta para est√°gio espec√≠fico
    const stageKey = stage === 'pictorial' ? 'pictorial' : stage === 'abstract' ? 'abstract' : 'concrete';
    const stageResponses = responses[stageKey as keyof typeof responses];
    const response = stageResponses[topic as keyof typeof stageResponses] || stageResponses.general;

    return {
      content: response,
      stage: stage
    };
  };

  const stageInfo = {
    concrete: { 
      title: "Est√°gio Concreto", 
      icon: "üß±", 
      color: "bg-orange-100 text-orange-800",
      description: "Manipula√ß√£o de objetos f√≠sicos"
    },
    pictorial: { 
      title: "Est√°gio Visual", 
      icon: "üé®", 
      color: "bg-blue-100 text-blue-800",
      description: "Representa√ß√µes visuais e desenhos"
    },
    abstract: { 
      title: "Est√°gio Abstrato", 
      icon: "üî¢", 
      color: "bg-purple-100 text-purple-800",
      description: "S√≠mbolos e opera√ß√µes matem√°ticas"
    },
    adaptive: { 
      title: "Abordagem Adaptativa", 
      icon: "üéØ", 
      color: "bg-orange-100 text-orange-800",
      description: "Combina√ß√£o de todos os est√°gios"
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      const response = await generateManthaResponse(inputMessage, currentStage);
      
      const manthaMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: response.content,
        sender: 'mantha',
        timestamp: new Date(),
        stage: response.stage as CPAStage,
        hasVisual: response.content.includes('Visual') || response.content.includes('Desenhe')
      };

      setMessages(prev => [...prev, manthaMessage]);
    } catch (error) {
      console.error('Erro ao gerar resposta:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="w-full max-w-5xl mx-auto p-6">
      <Card className="h-[850px] flex flex-col shadow-card">
        <CardHeader className="bg-gradient-to-r from-primary via-primary-hover to-primary text-white rounded-t-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 rounded-full bg-white/20 flex items-center justify-center">
                <Brain className="w-6 h-6 text-white" />
              </div>
              <div>
                <CardTitle className="text-xl font-bold text-white">Mantha - Tutor IA</CardTitle>
                <p className="text-white/90 text-sm flex items-center">
                  <span className="mr-2">{stageInfo[currentStage].icon}</span>
                  {stageInfo[currentStage].title}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <AIStatusIndicator />
            </div>
          </div>
        </CardHeader>

        {/* Sele√ß√£o de Est√°gio */}
        <div className="p-4 border-b bg-gradient-subtle">
          <div className="flex gap-2 flex-wrap">
            {Object.entries(stageInfo).map(([key, info]) => (
              <Button
                key={key}
                variant={currentStage === key ? "default" : "outline"}
                size="sm"
                onClick={() => setCurrentStage(key as CPAStage)}
                className="flex items-center gap-1"
              >
                <span>{info.icon}</span>
                <span className="hidden sm:inline">{info.title}</span>
              </Button>
            ))}
          </div>
          
          <div className="mt-2 text-sm text-muted-foreground">
            <strong>Modo atual:</strong> {stageInfo[currentStage].description}
          </div>
        </div>

        {/* √Årea do Chat */}
        <CardContent className="flex-1 p-0 overflow-hidden">
          <ScrollArea className="h-full p-4" ref={scrollRef}>
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                   <div
                     className={`max-w-[80%] rounded-lg p-4 ${
                       message.sender === 'user'
                         ? 'bg-primary text-primary-foreground'
                         : 'bg-muted text-foreground'
                     }`}
                   >
                     <div className="whitespace-pre-wrap text-sm leading-relaxed">{message.content}</div>
                    
                    <div className="flex items-center justify-between mt-2 text-xs opacity-70">
                      <span>
                        {message.timestamp.toLocaleTimeString([], { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </span>
                      {message.stage && (
                        <Badge variant="secondary" className={stageInfo[message.stage].color}>
                          {stageInfo[message.stage].icon} {stageInfo[message.stage].title}
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
              ))}
              
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-muted rounded-lg p-3 max-w-[80%]">
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
                      <span className="text-sm text-muted-foreground">Mantha est√° pensando...</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </ScrollArea>
        </CardContent>

        {/* √Årea de Input com bot√µes espec√≠ficos */}
        <div className="p-4 border-t bg-background">
          {/* Bot√µes de Dica e Ajuda Espec√≠ficos */}
          <div className="flex gap-2 mb-3 justify-center flex-wrap">
            <Button 
              variant="outline" 
              size="sm"
              className="bg-primary/5 text-primary border-primary/20 hover:bg-primary/10"
              onClick={() => {
                const lastUserMessage = messages.filter(m => m.sender === 'user').pop();
                const problemContext = lastUserMessage ? lastUserMessage.content : "este problema";
                setInputMessage(`Explique ${problemContext} de forma mais visual`);
              }}
            >
              <Target className="w-3 h-3 mr-1" />
              Mais Visual
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              className="bg-primary/5 text-primary border-primary/20 hover:bg-primary/10"
              onClick={() => {
                setInputMessage("Como posso usar objetos f√≠sicos para entender melhor?");
              }}
            >
              <BookOpen className="w-3 h-3 mr-1" />
              Concreto
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              className="bg-primary/5 text-primary border-primary/20 hover:bg-primary/10"
              onClick={() => {
                setInputMessage("Mostre-me a f√≥rmula matem√°tica");
              }}
            >
              <Calculator className="w-3 h-3 mr-1" />
              F√≥rmula
            </Button>
          </div>

          {/* Input */}
          <div className="flex gap-2">
            <Input
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Digite sua pergunta de matem√°tica..."
              className="flex-1"
              disabled={isLoading}
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              size="icon"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
          
          {/* Exemplos de perguntas */}
          <div className="mt-3 text-xs text-muted-foreground text-center">
            Experimente: "Quanto √© 7 √ó 8?", "Como resolver fra√ß√µes?", "Teorema de Pit√°goras"
          </div>
        </div>
      </Card>
    </div>
  );
};

export default ManthaChatTutor;